/*

你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。

空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

示例 1:

输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /
  4

输出: "1(2(4))(3)"

解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2:

输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \
      4

输出: "1(2()(4))(3)"

解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。

链接：https://leetcode-cn.com/problems/construct-string-from-binary-tree

    Solution temp;
    int bin_input[] = { 1, 2, 3, -1, 4};
    temp.CreateBinTreeLevelOrder(bin_input, sizeof(bin_input) / sizeof(int));
    string ret = temp.tree2str(temp.GetRootNode());
    cout << ret << endl;

*/

#include "BinaryTree.h"
#include <functional>
using namespace std;

class Solution : public BinaryTree<int> {
public:
    string tree2str(TreeNode<int>* root) {
        string ret;
        function<void(TreeNode<int>*)> dfs = [&](TreeNode<int>* ptr) {
            if (ptr == nullptr)
                return;
            ret += to_string(ptr->val);
            if (ptr->left || ptr->right) {
                ret.push_back('(');
                dfs(ptr->left);
                ret.push_back(')');
            }
            if (ptr->right) {
                ret.push_back('(');
                dfs(ptr->right);
                ret.push_back(')');
            }
        };
        dfs(root);
        return ret;
    }
};
